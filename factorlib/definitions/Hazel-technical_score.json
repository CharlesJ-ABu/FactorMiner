{
  "factor_id": "Hazel-technical_score",
  "name": "Hazel 综合技术得分",
  "description": "0.3*price_mom + 0.2*vol_mom + 0.2*trend_strength + 0.15*price_position + 0.15*sentiment",
  "category": "technical",
  "subcategory": "",
  "computation_type": "function",
  "computation_data": {
    "function_file": "functions/Hazel-technical_score.py",
    "function_code": "import pandas as pd\nimport numpy as np\n\ndef calculate(data: pd.DataFrame, mom_window: int = 5, trend_window: int = 10, pos_window: int = 20, sent_window: int = 10, **kwargs) -> pd.Series:\n    required = {\"close\", \"high\", \"low\", \"volume\"}\n    if data is None or len(data) == 0 or not required.issubset(set(data.columns)):\n        return pd.Series(dtype=float)\n    c = pd.to_numeric(data[\"close\"], errors=\"coerce\")\n    h = pd.to_numeric(data[\"high\"], errors=\"coerce\")\n    l = pd.to_numeric(data[\"low\"], errors=\"coerce\")\n    v = pd.to_numeric(data[\"volume\"], errors=\"coerce\")\n\n    price_mom = (c - c.shift(mom_window)) / c.shift(mom_window)\n    vol_mom = (v - v.shift(mom_window)) / v.shift(mom_window)\n    trend_strength = (c - c.shift(trend_window)).abs() / c.shift(trend_window)\n    hmax = h.rolling(pos_window).max(); lmin = l.rolling(pos_window).min()\n    pos = (c - lmin) / (hmax - lmin).replace(0, np.nan)\n    mc = c.rolling(sent_window).mean(); mv = v.rolling(sent_window).mean()\n    sentiment = ((c > mc) & (v > mv)).astype(float)\n\n    return (price_mom * 0.3 + vol_mom * 0.2 + trend_strength * 0.2 + pos * 0.15 + sentiment * 0.15)\n",
    "entry_point": "calculate",
    "imports": []
  },
  "parameters": {
    "mom_window": 5,
    "trend_window": 10,
    "pos_window": 20,
    "sent_window": 10
  },
  "dependencies": [],
  "output_type": "series",
  "metadata": {
    "checksum": "9e7c6edd",
    "created_at": "2025-08-18T22:51:16.966196"
  }
}